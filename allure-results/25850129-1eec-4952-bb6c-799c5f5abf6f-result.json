{"name": "test_verifyPracticalAssignmentText", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7cc2ee925+77845]\n\tGetHandleVerifier [0x0x7ff7cc2ee980+77936]\n\t(No symbol) [0x0x7ff7cc0a9cda]\n\t(No symbol) [0x0x7ff7cc1006aa]\n\t(No symbol) [0x0x7ff7cc10095c]\n\t(No symbol) [0x0x7ff7cc153d07]\n\t(No symbol) [0x0x7ff7cc12890f]\n\t(No symbol) [0x0x7ff7cc150b07]\n\t(No symbol) [0x0x7ff7cc1286a3]\n\t(No symbol) [0x0x7ff7cc0f1791]\n\t(No symbol) [0x0x7ff7cc0f2523]\n\tGetHandleVerifier [0x0x7ff7cc5c683d+3059501]\n\tGetHandleVerifier [0x0x7ff7cc5c0bfd+3035885]\n\tGetHandleVerifier [0x0x7ff7cc5e03f0+3164896]\n\tGetHandleVerifier [0x0x7ff7cc308c2e+185118]\n\tGetHandleVerifier [0x0x7ff7cc31053f+216111]\n\tGetHandleVerifier [0x0x7ff7cc2f72d4+113092]\n\tGetHandleVerifier [0x0x7ff7cc2f7489+113529]\n\tGetHandleVerifier [0x0x7ff7cc2de288+10616]\n\tBaseThreadInitThunk [0x0x7fff9b9e7374+20]\n\tRtlUserThreadStart [0x0x7fff9bddcc91+33]", "trace": "self = <tests.test_loginToSelenium.Test_LoginToSelenium object at 0x0000024062F9A190>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8d0e5221ea9d417a4ef60945d8984f12\")>\n\n    @pytest.mark.sanity\n    @pytest.mark.leaning_material_Part2\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_verifyPracticalAssignmentText(self, setup):\n        self.driver = setup\n        self.driver.get(self.dev_url)\n        self.lm = learningMaterialPage(self.driver)\n>       self.lm.verifyPracticalAssignmentText()\n\ntests\\test_loginToSelenium.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\learningMaterialPage.py:15: in verifyPracticalAssignmentText\n    element = wait.until(ec.visibility_of_element_located((By.XPATH, self.lbl_practicalAssignment_xpath)))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8d0e5221ea9d417a4ef60945d8984f12\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002405FD0AF20>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7cc2ee925+77845]\nE       \tGetHandleVerifier [0x0x7ff7cc2ee980+77936]\nE       \t(No symbol) [0x0x7ff7cc0a9cda]\nE       \t(No symbol) [0x0x7ff7cc1006aa]\nE       \t(No symbol) [0x0x7ff7cc10095c]\nE       \t(No symbol) [0x0x7ff7cc153d07]\nE       \t(No symbol) [0x0x7ff7cc12890f]\nE       \t(No symbol) [0x0x7ff7cc150b07]\nE       \t(No symbol) [0x0x7ff7cc1286a3]\nE       \t(No symbol) [0x0x7ff7cc0f1791]\nE       \t(No symbol) [0x0x7ff7cc0f2523]\nE       \tGetHandleVerifier [0x0x7ff7cc5c683d+3059501]\nE       \tGetHandleVerifier [0x0x7ff7cc5c0bfd+3035885]\nE       \tGetHandleVerifier [0x0x7ff7cc5e03f0+3164896]\nE       \tGetHandleVerifier [0x0x7ff7cc308c2e+185118]\nE       \tGetHandleVerifier [0x0x7ff7cc31053f+216111]\nE       \tGetHandleVerifier [0x0x7ff7cc2f72d4+113092]\nE       \tGetHandleVerifier [0x0x7ff7cc2f7489+113529]\nE       \tGetHandleVerifier [0x0x7ff7cc2de288+10616]\nE       \tBaseThreadInitThunk [0x0x7fff9b9e7374+20]\nE       \tRtlUserThreadStart [0x0x7fff9bddcc91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1752632602169, "stop": 1752632612536, "uuid": "9726a7b5-468c-4225-bda9-7793d8230a02", "historyId": "ea068d683c2c227ed0acc73da75d5ae3", "testCaseId": "ea068d683c2c227ed0acc73da75d5ae3", "fullName": "tests.test_loginToSelenium.Test_LoginToSelenium#test_verifyPracticalAssignmentText", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "leaning_material_Part2"}, {"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_loginToSelenium"}, {"name": "subSuite", "value": "Test_LoginToSelenium"}, {"name": "host", "value": "DESKTOP-GGVQ7HL"}, {"name": "thread", "value": "7644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_loginToSelenium"}]}